micronaut:
  application:
    name: favorites-app
  executors:
    io:
      type: fixed
      nThreads: 4 # same as datasource maximumPoolSize
  http:
    services:
      carts-api:
        urls:
          - ${cart-base-url}
        follow-redirects: false
        connect-timeout: 1500ms
        read-timeout: 1500ms
        pool:
          enabled: true
          max-connections: 5

  metrics:
    binders:
      web:
        enabled: false # we are using our own binder via our custom micronaut-metrics lib

lists:
  metrics:
    binders:
      http:
        enabled: true # we are using our own binder via our custom micronaut-metrics lib

datasources: # hikari
  default:
    url: ${jdbc-url}
    driverClassName: org.postgresql.Driver
    username: ${dbuser}
    password: ${dbpassword}
    dialect: POSTGRES
    poolName: listsapiapp     # default autogenerated
    maximumPoolSize: 4        # default 10
    minimumIdle: 1            # default same as maximumPoolSize, valid if minimumIdle < maximumPoolSize
    idleTimeout: 600000       # default 600000ms (10min)
    maxLifetime: 1800000      # default 1800000ms (30min), should be shorter than any database imposed connection time limit
    connectionTimeout: 10000  # default: 30000ms (30 seconds)

jackson:
  property-naming-strategy: "SNAKE_CASE"

filter:
  server:
    order:
      mdc-filter: 50
      lists-brave-tracing-server-filter: 100
      authorization-filter: 200
      sanitizing-filter: 300
  client:
    order:
      lists-brave-tracing-client-filter: 900
      metrics-filter: 850
      resilience-client-filter: 800
      oauth-filter: 701
      oauth-key-filter: 700

logging:
  mdc:
    enabled: true
    keys:
      - profile_id
      - x-api-id
    filter:
        path: /lists/**

api:
  oauth:
    url: https://oauth.iam.perf.target.com
    client-id: ${id2-client-id}
    client-secret: ${id2-client-secret}
    nuid-username: ${id2-nuid-username}
    nuid-password: ${id2-nuid-password}
    id2-refresh-mins: ${id2-refresh-minutes}
    excluded-paths: /lists/v2

resilience4j:
  circuitbreaker:
    failure-rate-threshold: 50            # failure rate threshold in percentage (default: 50)
    wait-duration-secs-in-open-state: 10  # time cb waits before transitioning from open to half-open (default: 60s)
    sliding-window-type: TIME_BASED       # possible values TIME_BASED or COUNT_BASED (default: COUNT_BASED)
    sliding-window-size: 100               # seconds for TIME_BASED, request-count for COUNT_BASED (default: 100)
    minimum-number-of-calls: 10            # min calls required (per sliding window period) before cb calculates error rate (default: 10)

tracing:
  zipkin:
    enabled: true
    excluded-paths: /health
    b3-propagation-suppress: true
    sample-rate-percent: 0.5
    http:
      url: "https://zipkinserver.dev.target.com"
      messageMaxBytes: 50000
    app:
      name: favorites
      env: stage
      region: tdc

api-key: ${api-key}

cart:
  client:
    refresh-cycle-sec: 999999999

list:
  list-type: FAVORITES
  max-count: 50
  max-pending-item-count: 100
  max-completed-items-count: 100
  abandon-after-duration-in-days: 730 # It is two years duration
  get-favorites-max-tcin-count: 28
  default-list-title: "My Favorites"
  page-size: 28
  features.two-carts: false
  features.dedupe: false
  features.sort-position: false
  features.fixed-default-list: true
  redsky-batch-size: 28

sic:
  batch-size: 50

components:
  server:
    authorization-filter:
      base-uri: /favorites/v1

kafka:
  bootstrap:
    servers: ${kafka-vip}
#  ssl:
#    endpoint.identification.algorithm: ""# disable karka broker cert's hostname verification
#    keystore:
#      location: ${kafka-ssl-location}/client-keystore.jks
#      password: ${kafka-ssl-keypass}
#    truststore:
#      location: ${kafka-ssl-location}/client-truststore.jks
#      password: ${kafka-ssl-trustpass}
#      type: PKCS12
#  security:
#    protocol: ssl
  producers:
    # default is a Jackson based JSON serializer for key/value
    lists-msg-bus-producer:
      retries: 3
      retry:
        backoff:
          ms: 1_000
      max:
        in:
          flight:
            requests:
              per:
                connection: 1
        block:
          ms: 2_000

msgbus:
  source: favorites
  kafka:
    consumer:
      enabled: false
    producer:
      enabled: true
    dlqconsumer:
      enabled: false
    dlqproducer:
      enabled: true
    topic: ${kafka-msgbus-topic}
    consumer-group: favorites-msg-bus-consumer
    consumer-batch-size: 10
    dlq-topic: ${kafka-dlq-topic}
    dlq-consumer-group: favorites-dlq-consumer
    dlq-event-retry-interval-secs: 1
    dlq-max-event-retry-count: 2
    dlq-consumer-batch-size: 10

