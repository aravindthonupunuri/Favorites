buildscript {
    repositories {
        jcenter()
        maven { url "https://binrepo.target.com/artifactory/platform" }
    }
    dependencies {
        classpath "com.target.platform:platform-connector-gradle:2.0.8"
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.8.RELEASE" apply false
    id "org.jetbrains.kotlin.jvm" version "1.3.41" apply false
    id "org.jetbrains.kotlin.kapt" version "1.3.41" apply false
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.41" apply false
    id "org.jlleitschuh.gradle.ktlint" version "8.2.0" apply false
    id "io.gitlab.arturbosch.detekt" version "1.0.0-RC15" apply false
    id "org.sonarqube" version "2.7.1" apply false
    id "org.flywaydb.flyway" version "6.0.4" apply false
}

apply plugin: "com.target.platform.connector"
project.tasks.startScripts.enabled = false

allprojects {
    apply plugin: "java"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "org.jetbrains.kotlin.kapt"
    apply plugin: "org.jetbrains.kotlin.plugin.allopen"
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply plugin: "io.gitlab.arturbosch.detekt"
    apply plugin: "org.sonarqube"
    apply plugin: "groovy"
    apply plugin: "jacoco"
    apply plugin: "org.flywaydb.flyway"

    repositories {
        mavenCentral()
        maven { url "https://jcenter.bintray.com" }
        maven { url "https://binrepo.target.com/artifactory/lists-v4" }
        maven { url "https://binrepo.target.com/artifactory/driveup-libs-release" }
        maven { url "https://binrepo.target.com/artifactory/eno-release" }
        maven { url "https://binrepo.target.com/artifactory/platform" }
        maven { url "http://binrepo.target.com/artifactory/digital-search-libs-snapshot-local/" }
        mavenLocal()
    }

    sourceCompatibility = 11
    targetCompatibility = 11

    dependencyManagement {
        imports {
            mavenBom "io.micronaut:micronaut-bom:1.2.10"
        }
    }

    dependencies {
        implementation "io.projectreactor:reactor-core"
        implementation "org.jetbrains.kotlin:kotlin-stdlib:1.3.41"
        implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.41"
        implementation "io.github.microutils:kotlin-logging:1.6.24"

        implementation "io.micronaut:micronaut-runtime"
        implementation "io.micronaut:micronaut-http-client"
        implementation "io.micronaut:micronaut-http-server-netty"
        implementation "io.micronaut:micronaut-validation"
        implementation "io.micronaut.configuration:micronaut-hibernate-validator"
        implementation "javax.annotation:javax.annotation-api"

        implementation "com.tgt.lists:lists-lib:1.0.28"

        implementation "com.tgt.lists:lists-cart-client:1.122.5"
        implementation "com.tgt.lists:lists-oauth:1.128.1"
        implementation "com.tgt.lists.micronaut:micronaut-zipkin:1.127.19"
        implementation "com.tgt.lists:lists-message-bus:1.128.7"
        implementation "com.tgt.lists:lists-logging:1.128.7"
        implementation 'com.tgt.lists.micronaut:micronaut-jdbc:1.127.7'
        implementation "com.tgt.lists:platform-connector-micronaut:2.0.8.1"
        implementation "io.swagger.core.v3:swagger-annotations"
        implementation "com.tgt.lists.micronaut:micronaut-metrics:1.128.4"

        implementation "io.micronaut.data:micronaut-data-processor:1.0.0.M5"

        kapt "io.micronaut:micronaut-inject-java"
        kapt "io.micronaut.configuration:micronaut-openapi"
        kaptTest "io.micronaut:micronaut-inject-java"

        runtime "com.fasterxml.jackson.core:jackson-databind:2.9.8"
        runtime "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9"

        testImplementation "io.micronaut:micronaut-inject-groovy"
        testImplementation "org.codehaus.groovy:groovy:2.5.5"
        testImplementation "org.spockframework:spock-core:1.3-groovy-2.5"
        testImplementation "io.micronaut.test:micronaut-test-spock"
        testImplementation "com.tgt.swaggerlib:swagger-sync:1.210.0"
        testImplementation "com.tgt.lists.micronaut:micronaut-test:1.127.0"
        testImplementation("org.objenesis:objenesis:2.6")
        testImplementation 'io.micronaut.configuration:micronaut-micrometer-registry-prometheus'
        testImplementation "io.micronaut.configuration:micronaut-jdbc-hikari"
        testImplementation "io.micronaut.configuration:micronaut-flyway"
        testImplementation "org.testcontainers:spock:1.12.2"
        testImplementation "org.testcontainers:postgresql:1.12.2"
        testImplementation "org.postgresql:postgresql:42.2.4"
        testImplementation "cglib:cglib:3.3.0"
        testImplementation group: 'io.opentracing', name: 'opentracing-mock', version: '0.33.0'
    }

    configurations.all { exclude group: "ch.qos.logback" }

    jar {
        exclude('**/log4j*.xml')
        exclude('**/logback*.xml')
        exclude('**/application*.yml')
        exclude('**/proxy*.yml')
    }

    allOpen {
        annotation("io.micronaut.http.annotation.Controller")
        annotation("javax.inject.Singleton")
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
            //Will retain parameter names for Java reflection
            javaParameters = true
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
            javaParameters = true
        }
    }

    flyway {
        // ./gradlew -Ppostgres_host=localhost -Ppostgres_ssl='' -Ppostgres_user=postgres -Ppostgres_pwd=postgres flywayMigrate -i
        url = "jdbc:postgresql://${postgres_host}:5432/postgres${postgres_ssl}"
        user = "${postgres_user}"
        password = "${postgres_pwd}"
        schemas = ['lists']
    }

    detekt {
        parallel = true
        config = files("src/main/resources/detekt.yml")
        input = files(
            "src/main/kotlin/com/tgt/lists/api"
        )
        filters = ".*/com/tgt/lists/integration/cart/transport/.*"

        reports {
            html {
                enabled = true
                destination = file("build/reports/detekt.html")
            }
        }

        idea {
            path = ".idea"
            codeStyleScheme = ".idea/idea-code-style.xml"
            inspectionsProfile = ".idea/inspect.xml"
            report = "$project.projectDir/reports"
            mask = "*.kt,"
        }
    }
}

task downloadDependencies() {
    doLast {
        allprojects { p ->
            configurations.each { c ->
                if (c.canBeResolved) {
                    println "Downloading dependencies for $p.path - $c.name"
                    c.files
                }
            }
        }
    }
}
